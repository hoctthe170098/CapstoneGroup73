// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudyFlow.Infrastructure.Data;

#nullable disable

namespace CleanArchitecture.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.BaiKiemTra", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LichHocId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("NgayKiemTra")
                        .HasColumnType("date");

                    b.Property<DateOnly>("NgayTao")
                        .HasColumnType("date");

                    b.Property<string>("Ten")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TrangThai")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UrlFile")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("LichHocId");

                    b.ToTable("BaiKiemTra", (string)null);
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.BaiTap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LichHocId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Ngay")
                        .HasColumnType("date");

                    b.Property<string>("NoiDung")
                        .IsRequired()
                        .HasMaxLength(750)
                        .HasColumnType("nvarchar(750)");

                    b.Property<TimeOnly>("ThoiGianBatDau")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("ThoiGianKetThuc")
                        .HasColumnType("time");

                    b.Property<string>("TieuDe")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TrangThai")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UrlFile")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("LichHocId");

                    b.HasIndex("Ngay", "LichHocId")
                        .IsUnique();

                    b.ToTable("BaiTap", (string)null);

                    b.HasAnnotation("CheckConstraint:CK_BaiTap_TrangThai", "[TrangThai] IN ('open', 'close')");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.ChinhSach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Mota")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<float>("PhanTramGiam")
                        .HasColumnType("real");

                    b.Property<string>("Ten")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("ChinhSach", null, t =>
                        {
                            t.HasCheckConstraint("CK_ChinhSach_PhanTramGiam", "[PhanTramGiam] > 0 AND [PhanTramGiam] <= 0.1");
                        });
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.ChuongTrinh", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MoTa")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("TieuDe")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TrangThai")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChuongTrinh", (string)null);

                    b.HasAnnotation("CheckConstraint:CK_ChuongTrinh_TrangThai", "[TrangThai] IN ('use', 'notuse')");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.CoSo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<string>("DiaChi")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SoDienThoai")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Ten")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TrangThai")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("CoSo", (string)null);

                    b
                        .HasAnnotation("CheckConstraint:CK_CoSo_SoDienThoai", "[SoDienThoai] LIKE '0%' AND [SoDienThoai] NOT LIKE '%[^0-9]%'")
                        .HasAnnotation("CheckConstraint:CK_CoSo_TrangThai", "[TrangThai] IN ('open', 'close')");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.DiemDanh", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("DiemBTVN")
                        .HasColumnType("real");

                    b.Property<float?>("DiemTrenLop")
                        .HasColumnType("real");

                    b.Property<DateOnly>("Ngay")
                        .HasColumnType("date");

                    b.Property<string>("NhanXet")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("ThamGiaLopHocId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TrangThai")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("ThamGiaLopHocId");

                    b.HasIndex("Ngay", "ThamGiaLopHocId")
                        .IsUnique();

                    b.ToTable("DiemDanh", (string)null);

                    b
                        .HasAnnotation("CheckConstraint:CK_DiemDanh_DiemBTVN", "[DiemBTVN] > 0 AND [DiemBTVN] <= 10")
                        .HasAnnotation("CheckConstraint:CK_DiemDanh_DiemTrenLop", "[DiemTrenLop] > 0 AND [DiemTrenLop] <= 10")
                        .HasAnnotation("CheckConstraint:CK_DiemDanh_TrangThai", "[TrangThai] IN ('comat', 'vangmat')");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.GiaoVien", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("CoSoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DiaChi")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GioiTinh")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateOnly>("NgaySinh")
                        .HasColumnType("date");

                    b.Property<string>("SoDienThoai")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Ten")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TruongDangDay")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Code");

                    b.HasIndex("CoSoId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("GiaoVien", (string)null);

                    b
                        .HasAnnotation("CheckConstraint:CK_GiaoVien_Email", "[Email] LIKE '%_@_%._%' AND [Email] NOT LIKE '%[^a-zA-Z0-9.@_%+-]%'")
                        .HasAnnotation("CheckConstraint:CK_GiaoVien_GioiTinh", "[GioiTinh] IN ('Male', 'Female')")
                        .HasAnnotation("CheckConstraint:CK_GiaoVien_SoDienThoai", "[SoDienThoai] LIKE '0%' AND [SoDienThoai] NOT LIKE '%[^0-9]%'");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.HocSinh", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ChinhSachId")
                        .HasColumnType("int");

                    b.Property<Guid>("CoSoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DiaChi")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GioiTinh")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Lop")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateOnly>("NgaySinh")
                        .HasColumnType("date");

                    b.Property<string>("SoDienThoai")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Ten")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TruongDangHoc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Code");

                    b.HasIndex("ChinhSachId");

                    b.HasIndex("CoSoId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("HocSinh", (string)null);

                    b
                        .HasAnnotation("CheckConstraint:CK_HocSinh_Email", "[Email] LIKE '%_@_%._%' AND [Email] NOT LIKE '%[^a-zA-Z0-9.@_%+-]%'")
                        .HasAnnotation("CheckConstraint:CK_HocSinh_GioiTinh", "[GioiTinh] IN ('Male', 'Female')")
                        .HasAnnotation("CheckConstraint:CK_HocSinh_SoDienThoai", "[SoDienThoai] LIKE '0%' AND [SoDienThoai] NOT LIKE '%[^0-9]%'");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.KetQuaBaiKiemTra", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaiKiemTraId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Diem")
                        .HasColumnType("real");

                    b.Property<string>("HocSinhCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NhanXet")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("BaiKiemTraId");

                    b.HasIndex("HocSinhCode", "BaiKiemTraId")
                        .IsUnique();

                    b.ToTable("KetQuaBaiKiemTra", (string)null);

                    b.HasAnnotation("CheckConstraint:CK_KetQuaBaiKiemTra_Diem", "[Diem] > 0 AND [Diem] <= 10");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.LichHoc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChuongTrinhId")
                        .HasColumnType("int");

                    b.Property<string>("GiaoVienCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<TimeOnly>("GioBatDau")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("GioKetThuc")
                        .HasColumnType("time");

                    b.Property<int>("HocPhi")
                        .HasColumnType("int");

                    b.Property<Guid?>("LichHocGocId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("NgayBatDau")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("NgayHocGoc")
                        .HasColumnType("date");

                    b.Property<DateOnly>("NgayKetThuc")
                        .HasColumnType("date");

                    b.Property<int>("PhongId")
                        .HasColumnType("int");

                    b.Property<string>("TenLop")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Thu")
                        .HasColumnType("int");

                    b.Property<string>("TrangThai")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChuongTrinhId");

                    b.HasIndex("GiaoVienCode");

                    b.HasIndex("LichHocGocId");

                    b.HasIndex("PhongId");

                    b.ToTable("LichHoc", (string)null);

                    b
                        .HasAnnotation("CheckConstraint:CK_LichHoc_Thu", "[Thu] >= 2 AND [Thu] <= 8")
                        .HasAnnotation("CheckConstraint:CK_LichHoc_TrangThai", "[TrangThai] IN ('NotYet' , 'Open', 'Close')");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.NhanVien", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("CoSoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DiaChi")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GioiTinh")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateOnly>("NgaySinh")
                        .HasColumnType("date");

                    b.Property<string>("SoDienThoai")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Ten")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Code");

                    b.HasIndex("CoSoId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("NhanVien", (string)null);

                    b
                        .HasAnnotation("CheckConstraint:CK_NhanVien_Email", "[Email] LIKE '%_@_%._%' AND [Email] NOT LIKE '%[^a-zA-Z0-9.@_%+-]%'")
                        .HasAnnotation("CheckConstraint:CK_NhanVien_GioiTinh", "[GioiTinh] IN ('Male', 'Female')")
                        .HasAnnotation("CheckConstraint:CK_NhanVien_SoDienThoai", "[SoDienThoai] LIKE '0%' AND [SoDienThoai] NOT LIKE '%[^0-9]%'");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.NoiDungBaiHoc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChuongTrinhId")
                        .HasColumnType("int");

                    b.Property<string>("Mota")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("SoThuTu")
                        .HasColumnType("int");

                    b.Property<string>("TieuDe")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ChuongTrinhId");

                    b.ToTable("NoiDungBaiHoc", (string)null);
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.Phong", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CoSoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ten")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TrangThai")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CoSoId");

                    b.ToTable("Phong", (string)null);

                    b.HasAnnotation("CheckConstraint:CK_Phong_TrangThai", "[TrangThai] IN ('Use', 'NonUse')");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.TaiLieuHocTap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("NgayTao")
                        .HasColumnType("date");

                    b.Property<Guid>("NoiDungBaiHocId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ten")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("urlFile")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("urlType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("NoiDungBaiHocId");

                    b.ToTable("TaiLieuHocTap", (string)null);
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.ThamGiaLopHoc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HocSinhCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("LichHocId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("NgayBatDau")
                        .HasColumnType("date");

                    b.Property<DateOnly>("NgayKetThuc")
                        .HasColumnType("date");

                    b.Property<string>("TrangThai")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LichHocId");

                    b.HasIndex("HocSinhCode", "LichHocId")
                        .IsUnique();

                    b.ToTable("ThamGiaLopHoc", (string)null);

                    b.HasAnnotation("CheckConstraint:CK_ThamGiaLopHoc_TrangThai", "[TrangThai] IN ('hocthu', 'chinhthuc','hocbu')");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.TodoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Done")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ListId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Reminder")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.ToTable("TodoItems");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.TodoList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("TodoLists");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.TraLoi", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaiTapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HocSinhCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NoiDung")
                        .IsRequired()
                        .HasMaxLength(750)
                        .HasColumnType("nvarchar(750)");

                    b.Property<DateTime>("ThoiGian")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlFile")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("BaiTapId");

                    b.HasIndex("HocSinhCode");

                    b.ToTable("TraLoi", (string)null);
                });

            modelBuilder.Entity("StudyFlow.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StudyFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StudyFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudyFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StudyFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.BaiKiemTra", b =>
                {
                    b.HasOne("StudyFlow.Domain.Entities.LichHoc", "LichHoc")
                        .WithMany("BaiKiemTras")
                        .HasForeignKey("LichHocId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LichHoc");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.BaiTap", b =>
                {
                    b.HasOne("StudyFlow.Domain.Entities.LichHoc", "LichHoc")
                        .WithMany("BaiTaps")
                        .HasForeignKey("LichHocId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LichHoc");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.DiemDanh", b =>
                {
                    b.HasOne("StudyFlow.Domain.Entities.ThamGiaLopHoc", "ThamGiaLopHoc")
                        .WithMany()
                        .HasForeignKey("ThamGiaLopHocId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ThamGiaLopHoc");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.GiaoVien", b =>
                {
                    b.HasOne("StudyFlow.Domain.Entities.CoSo", "Coso")
                        .WithMany("GiaoViens")
                        .HasForeignKey("CoSoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudyFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("StudyFlow.Domain.Entities.GiaoVien", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Coso");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.HocSinh", b =>
                {
                    b.HasOne("StudyFlow.Domain.Entities.ChinhSach", "ChinhSach")
                        .WithMany("HocSinhs")
                        .HasForeignKey("ChinhSachId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StudyFlow.Domain.Entities.CoSo", "Coso")
                        .WithMany("HocSinhs")
                        .HasForeignKey("CoSoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudyFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("StudyFlow.Domain.Entities.HocSinh", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChinhSach");

                    b.Navigation("Coso");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.KetQuaBaiKiemTra", b =>
                {
                    b.HasOne("StudyFlow.Domain.Entities.BaiKiemTra", "BaiKiemTra")
                        .WithMany("KetQuaBaiKiemTras")
                        .HasForeignKey("BaiKiemTraId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudyFlow.Domain.Entities.HocSinh", "HocSinh")
                        .WithMany("KetQuaBaiKiemTras")
                        .HasForeignKey("HocSinhCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BaiKiemTra");

                    b.Navigation("HocSinh");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.LichHoc", b =>
                {
                    b.HasOne("StudyFlow.Domain.Entities.ChuongTrinh", "ChuongTrinh")
                        .WithMany("LichHocs")
                        .HasForeignKey("ChuongTrinhId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudyFlow.Domain.Entities.GiaoVien", "GiaoVien")
                        .WithMany("LichHocs")
                        .HasForeignKey("GiaoVienCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudyFlow.Domain.Entities.LichHoc", "LichHocGoc")
                        .WithMany()
                        .HasForeignKey("LichHocGocId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StudyFlow.Domain.Entities.Phong", "Phong")
                        .WithMany("LichHocs")
                        .HasForeignKey("PhongId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChuongTrinh");

                    b.Navigation("GiaoVien");

                    b.Navigation("LichHocGoc");

                    b.Navigation("Phong");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.NhanVien", b =>
                {
                    b.HasOne("StudyFlow.Domain.Entities.CoSo", "Coso")
                        .WithMany("NhanViens")
                        .HasForeignKey("CoSoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudyFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("StudyFlow.Domain.Entities.NhanVien", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Coso");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.NoiDungBaiHoc", b =>
                {
                    b.HasOne("StudyFlow.Domain.Entities.ChuongTrinh", "ChuongTrinh")
                        .WithMany("NoiDungBaiHocs")
                        .HasForeignKey("ChuongTrinhId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChuongTrinh");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.Phong", b =>
                {
                    b.HasOne("StudyFlow.Domain.Entities.CoSo", "CoSo")
                        .WithMany("Phongs")
                        .HasForeignKey("CoSoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CoSo");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.TaiLieuHocTap", b =>
                {
                    b.HasOne("StudyFlow.Domain.Entities.NoiDungBaiHoc", "NoiDungBaiHoc")
                        .WithMany("TaiLieuHocTaps")
                        .HasForeignKey("NoiDungBaiHocId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NoiDungBaiHoc");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.ThamGiaLopHoc", b =>
                {
                    b.HasOne("StudyFlow.Domain.Entities.HocSinh", "HocSinh")
                        .WithMany("ThamGiaLopHocs")
                        .HasForeignKey("HocSinhCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudyFlow.Domain.Entities.LichHoc", "LichHoc")
                        .WithMany("ThamGiaLopHocs")
                        .HasForeignKey("LichHocId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HocSinh");

                    b.Navigation("LichHoc");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.TodoItem", b =>
                {
                    b.HasOne("StudyFlow.Domain.Entities.TodoList", "List")
                        .WithMany("Items")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("List");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.TodoList", b =>
                {
                    b.OwnsOne("StudyFlow.Domain.ValueObjects.Colour", "Colour", b1 =>
                        {
                            b1.Property<int>("TodoListId")
                                .HasColumnType("int");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TodoListId");

                            b1.ToTable("TodoLists");

                            b1.WithOwner()
                                .HasForeignKey("TodoListId");
                        });

                    b.Navigation("Colour")
                        .IsRequired();
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.TraLoi", b =>
                {
                    b.HasOne("StudyFlow.Domain.Entities.BaiTap", "Baitap")
                        .WithMany("TraLois")
                        .HasForeignKey("BaiTapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudyFlow.Domain.Entities.HocSinh", "HocSinh")
                        .WithMany("TraLois")
                        .HasForeignKey("HocSinhCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Baitap");

                    b.Navigation("HocSinh");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.BaiKiemTra", b =>
                {
                    b.Navigation("KetQuaBaiKiemTras");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.BaiTap", b =>
                {
                    b.Navigation("TraLois");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.ChinhSach", b =>
                {
                    b.Navigation("HocSinhs");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.ChuongTrinh", b =>
                {
                    b.Navigation("LichHocs");

                    b.Navigation("NoiDungBaiHocs");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.CoSo", b =>
                {
                    b.Navigation("GiaoViens");

                    b.Navigation("HocSinhs");

                    b.Navigation("NhanViens");

                    b.Navigation("Phongs");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.GiaoVien", b =>
                {
                    b.Navigation("LichHocs");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.HocSinh", b =>
                {
                    b.Navigation("KetQuaBaiKiemTras");

                    b.Navigation("ThamGiaLopHocs");

                    b.Navigation("TraLois");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.LichHoc", b =>
                {
                    b.Navigation("BaiKiemTras");

                    b.Navigation("BaiTaps");

                    b.Navigation("ThamGiaLopHocs");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.NoiDungBaiHoc", b =>
                {
                    b.Navigation("TaiLieuHocTaps");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.Phong", b =>
                {
                    b.Navigation("LichHocs");
                });

            modelBuilder.Entity("StudyFlow.Domain.Entities.TodoList", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
