import { Component, OnInit, ChangeDetectorRef  } from '@angular/core';
import { Giaovien } from './shared/giaovien.model';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { GiaovienService } from './shared/giaovien.service';
import { Router } from '@angular/router';
import { ToastrService } from 'ngx-toastr';
@Component({
  selector: 'app-giaovien',
  templateUrl: './giaovien.component.html',
  styleUrls: ['./giaovien.component.scss']
})
export class GiaovienComponent implements OnInit {
  trangThai: string = ''; 
  searchTerm: string = ''; 
  students: any[] = [];
  currentPage: number = 1;
  totalPages: number = 1;
  pageSize: number = 8;
  provinces: any[] = [];
  districts: any[] = [];
  editDistricts: any[] = [];
  addTeacherForm: FormGroup;
  editTeacherForm: FormGroup;
  selectedTeacher: any;

  constructor(private giaovienService: GiaovienService, private router: Router, private cdr: ChangeDetectorRef,private toastr: ToastrService,  private fb: FormBuilder) {
    this.addTeacherForm = this.fb.group({
      code: ['', Validators.required],
      ten: ['', [Validators.required, Validators.maxLength(30)]],
      gioiTinh: ['Nam', Validators.required],
      ngaySinh: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]],
      soDienThoai: ['', [Validators.required, Validators.pattern(/^0\d{9,10}$/)]],
      truongDangDay: ['', Validators.required],
      province: ['', Validators.required],
      district: ['', Validators.required],
      diaChiCuThe: ['', [Validators.required, Validators.maxLength(100)]]
    });
    this.editTeacherForm = this.fb.group({
      code: [{ value: '', disabled: true }], // Code kh√¥ng ƒë∆∞·ª£c ch·ªânh s·ª≠a
      ten: ['', [Validators.required, Validators.maxLength(30)]],
      gioiTinh: ['Nam', Validators.required],
      ngaySinh: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]],
      soDienThoai: ['', [Validators.required, Validators.pattern(/^0\d{9,10}$/)]],
      truongDangDay: ['', Validators.required],
      province: ['', Validators.required],
      district: ['', Validators.required],
      diaChiCuThe: ['', [Validators.required, Validators.maxLength(100)]],
      status: [true]
    });
    this.selectedTeacher = null;
  }

  ngOnInit(): void {
    this.loadDanhSachGiaoVien();
    this.loadProvinces();
  }

  loadProvinces() {
    this.giaovienService.getProvinces().subscribe(
        data => {
            console.log("D·ªØ li·ªáu t·ªânh/th√†nh ph·ªë t·ª´ API:", data); // Debug xem API c√≥ tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng
            this.provinces = data;
        },
        error => {
            console.error('L·ªói t·∫£i t·ªânh/th√†nh ph·ªë:', error);
        }
    );
}


// Khi ch·ªçn t·ªânh/th√†nh ph·ªë -> c·∫≠p nh·∫≠t qu·∫≠n/huy·ªán
onProvinceChange(provinceCode: string) {
    console.log("Gi√° tr·ªã t·ªânh/th√†nh ph·ªë ƒë∆∞·ª£c ch·ªçn:", provinceCode); // Ki·ªÉm tra gi√° tr·ªã t·ª´ select dropdown

    const selectedProvince = this.provinces.find(p => p.code == provinceCode); // Ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu

    if (selectedProvince) {
      console.log("T·ªânh ƒë√£ ch·ªçn:", selectedProvince);
      console.log("Danh s√°ch qu·∫≠n/huy·ªán:", selectedProvince.districts);
      this.districts = selectedProvince.districts;
  } else {
      console.warn("Kh√¥ng t√¨m th·∫•y t·ªânh/th√†nh ph·ªë trong danh s√°ch!");
      this.districts = [];
  }
  this.addTeacherForm.patchValue({ district: '' }); 
    
}



// Khi ch·ªçn t·ªânh/th√†nh ph·ªë trong modal ch·ªânh s·ª≠a -> c·∫≠p nh·∫≠t qu·∫≠n/huy·ªán
onProvinceChangeForEdit(provinceCode: string) {
    console.log("Gi√° tr·ªã t·ªânh/th√†nh ph·ªë ƒë∆∞·ª£c ch·ªçn trong Edit:", provinceCode);

    const selectedProvince = this.provinces.find(p => String(p.code) === String(provinceCode));

    if (selectedProvince) {
        console.log("T·ªânh ƒë√£ ch·ªçn trong Edit:", selectedProvince);
        console.log("Danh s√°ch qu·∫≠n/huy·ªán trong Edit:", selectedProvince.districts);
        this.editDistricts = selectedProvince.districts;
    } else {
        console.warn("Kh√¥ng t√¨m th·∫•y t·ªânh/th√†nh ph·ªë trong danh s√°ch Edit!");
        this.editDistricts = [];
    }

   
}
  
   /** üè´ Load danh s√°ch gi√°o vi√™n t·ª´ API */
   loadDanhSachGiaoVien() {
    let isActiveFilter: boolean | null = this.trangThai === 'Ho·∫°t ƒë·ªông' ? true : this.trangThai === 'T·∫°m ng·ª´ng' ? false : null;

    this.giaovienService.getDanhSachGiaoVien(this.currentPage, this.pageSize, this.searchTerm, '', isActiveFilter)
      .subscribe(response => {
        if (!response.isError && response.data) {
          this.students = response.data.map((gv: any) => ({
            code: gv.code || '',
            ten: gv.ten || '',
            gioiTinh: gv.gioiTinh || '',
            diaChi: gv.diaChi || '',
            truongDangDay: gv.truongDangDay || '',
            ngaySinh: gv.ngaySinh ? new Date(gv.ngaySinh) : null,
            email: gv.email || '',
            soDienThoai: gv.soDienThoai || '',
            isActive: gv.isActive !== undefined ? gv.isActive : false,
            tenCoSo: gv.tenCoSo || '',
            lopHocs: gv.tenLops ? gv.tenLops : [],
            showDetails: false
          }));

          this.totalPages = Math.ceil(response.data.length / this.pageSize);
        }
        this.cdr.detectChanges();
      });
  }

  

  /** Chuy·ªÉn trang */
  goToPage(page: number) {
    this.currentPage = page;
    this.loadDanhSachGiaoVien();
  }

  /** T√¨m ki·∫øm gi√°o vi√™n */
  searchGiaoVien() {
    this.currentPage = 1;
    this.loadDanhSachGiaoVien();
  }

  /** M·ªü r·ªông chi ti·∫øt gi√°o vi√™n */
  toggleDetails(index: number) {
    this.students[index].showDetails = !this.students[index].showDetails;
  }

  openEditTeacherModal(teacher: any) {
    console.log("üîç Gi√°o vi√™n ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ ch·ªânh s·ª≠a:", teacher);
  
    this.selectedTeacher = { ...teacher };
  
    if (!teacher.code || teacher.code.trim() === "") {
      console.error("‚ùå L·ªói: Gi√°o vi√™n kh√¥ng c√≥ m√£!");
      this.toastr.error("Gi√°o vi√™n kh√¥ng c√≥ m√£, kh√¥ng th·ªÉ ch·ªânh s·ª≠a!", "L·ªói");
      return;
    }
  
    this.editTeacherForm.patchValue({
      code: teacher.code,
      ten: teacher.ten,
      gioiTinh: teacher.gioiTinh,
      ngaySinh: teacher.ngaySinh ? new Date(teacher.ngaySinh).toISOString().split('T')[0] : '',
      email: teacher.email,
      soDienThoai: teacher.soDienThoai,
      truongDangDay: teacher.truongDangDay,
      province: teacher.province,
      district: teacher.district,
      diaChiCuThe: teacher.diaChiCuThe,
      status: teacher.isActive ? true : false // üÜï G√°n tr·∫°ng th√°i khi m·ªü form
    });
  
    console.log("‚úÖ D·ªØ li·ªáu sau khi g√°n v√†o form:", this.editTeacherForm.value);
  
    this.isEditModalOpen = true;
  }
  
  
  
  
  

  


  /** Th√™m gi√°o vi√™n */
  isModalOpen: boolean = false;
  newStudent: any = {
    code: '',
    ten: '',
    gioiTinh: 'Nam',
    ngaySinh: '',
    email: '',
    soDienThoai: '',
    truongDangDay: '',
    province: '', // L∆∞u m√£ t·ªânh/th√†nh ph·ªë
    district: '', // L∆∞u m√£ qu·∫≠n/huy·ªán
    diaChiCuThe: '' // L∆∞u ƒë·ªãa ch·ªâ c·ª• th·ªÉ
  };
  

  openAddTeacherModal() {
    this.addTeacherForm.reset();
    this.isModalOpen = true;
  }

  closeModal() {
    this.isModalOpen = false;
  }

  /** üì© G·ª≠i API ƒë·ªÉ th√™m gi√°o vi√™n */
  submitNewTeacher() {
    if (this.addTeacherForm.invalid) {
      this.addTeacherForm.markAllAsTouched();
      return;
    }
  
    const formData = this.addTeacherForm.value;
  
    console.log("üîç Ki·ªÉm tra d·ªØ li·ªáu form:", formData);
  
    // üîπ Ki·ªÉm tra province v√† district
    const provinceObj = this.provinces.find(p => p.code == formData.province);
    const provinceName = provinceObj ? provinceObj.name : '';
  
    const districtObj = this.districts.find(d => d.code == formData.district);
    const districtName = districtObj ? districtObj.name : '';
  
    console.log("‚úÖ Province Name:", provinceName);
    console.log("‚úÖ District Name:", districtName);
  
    // üîπ N·∫øu kh√¥ng c√≥ gi√° tr·ªã th√¨ g√°n l√† chu·ªói r·ªóng ƒë·ªÉ tr√°nh l·ªói `undefined`
    const diaChiFormatted = `${provinceName || ''}, ${districtName || ''}, ${formData.diaChiCuThe || ''}`.trim();
  
    const newTeacher = {
      code: formData.code,
      ten: formData.ten,
      gioiTinh: formData.gioiTinh,
      ngaySinh: formData.ngaySinh,
      email: formData.email,
      soDienThoai: formData.soDienThoai,
      truongDangDay: formData.truongDangDay,
      diaChi: diaChiFormatted
    };
  
    console.log(" G·ª≠i API th√™m gi√°o vi√™n:", newTeacher);
  
    this.giaovienService.createGiaoVien(newTeacher).subscribe({
      next: (res) => {
        if (!res.isError) {
          this.toastr.success("Th√™m gi√°o vi√™n th√†nh c√¥ng!", "Th√†nh c√¥ng");
          this.closeModal();
          this.loadDanhSachGiaoVien();
        } else {
          this.toastr.error(res.message, "L·ªói");
        }
      },
      error: () => {
        this.toastr.error("C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!", "L·ªói");
      }
    });
  }
  

  
  
  getProvinceName(provinceCode: string): string {
  const province = this.provinces.find(p => p.code === provinceCode);
  return province ? province.name : "";
}

getDistrictName(districtCode: string): string {
  const district = this.districts.find(d => d.code === districtCode);
  return district ? district.name : "";
}

  
  
  resetNewStudent() {
    this.newStudent = {
      code: '',
      ten: '',
      gioiTinh: 'Nam',
      ngaySinh: '',
      email: '',
      soDienThoai: '',
      truongDangDay: '',
      province: '',
      district: '',
      diaChi: ''
    };
    this.districts = []; // Reset danh s√°ch qu·∫≠n/huy·ªán
  }
  
  
  
  
  
  

  /** Ch·ªânh s·ª≠a gi√°o vi√™n */
  isEditModalOpen: boolean = false;
  editStudent: any = {
    code: '',
    ten: '',
    gioiTinh: 'Nam',
    ngaySinh: '',
    email: '',
    soDienThoai: '',
    truongDangDay: '',
    diaChi: ''
  };

  onEditStudentClick(index: number) {
    const teacher = this.students[index];
    if (!teacher || !teacher.code) {
        this.toastr.error("Kh√¥ng t√¨m th·∫•y m√£ gi√°o vi√™n!", "L·ªói");
        return;
    }

    this.selectedTeacher = { ...teacher }; // üÜï L∆∞u l·∫°i gi√°o vi√™n ƒëang ch·ªânh s·ª≠a

    console.log("üîç Gi√°o vi√™n ƒë∆∞·ª£c ch·ªçn:", this.selectedTeacher);

    // üè¢ T√°ch ƒë·ªãa ch·ªâ th√†nh ph·∫ßn ri√™ng (T·ªânh, Qu·∫≠n/Huy·ªán, ƒê·ªãa ch·ªâ c·ª• th·ªÉ)
    const addressParts = teacher.diaChi ? teacher.diaChi.split(',').map(part => part.trim()) : ['', '', ''];
    const provinceName = addressParts[0] || ''; // Th√†nh ph·ªë
    const districtName = addressParts[1] || ''; // Qu·∫≠n/Huy·ªán
    const detailAddress = addressParts[2] || ''; // ƒê·ªãa ch·ªâ c·ª• th·ªÉ

    // üîπ L·∫•y `provinceCode` t·ª´ `provinceName`
    const provinceObj = this.provinces.find(p => p.name === provinceName);
    const provinceCode = provinceObj ? provinceObj.code : '';

    // üîπ G·ªçi danh s√°ch qu·∫≠n/huy·ªán theo t·ªânh ƒë√£ ch·ªçn
    this.onProvinceChangeForEdit(provinceCode);

    // üîπ L·∫•y `districtCode` t·ª´ `districtName`
    const districtObj = provinceObj?.districts.find(d => d.name === districtName);
    const districtCode = districtObj ? districtObj.code : '';

    // üóìÔ∏è Chuy·ªÉn ƒë·ªïi ng√†y sinh v·ªÅ `yyyy-MM-dd`
    const ngaySinhFormatted = teacher.ngaySinh ? new Date(teacher.ngaySinh).toISOString().split('T')[0] : '';

    // üîπ C·∫≠p nh·∫≠t form v·ªõi d·ªØ li·ªáu ch·ªânh s·ª≠a
    this.editTeacherForm.patchValue({
        code: teacher.code, // ‚úÖ ƒê·∫£m b·∫£o code ƒë∆∞·ª£c g√°n ƒë√∫ng
        ten: teacher.ten,
        gioiTinh: teacher.gioiTinh,
        ngaySinh: ngaySinhFormatted,
        email: teacher.email,
        soDienThoai: teacher.soDienThoai,
        truongDangDay: teacher.truongDangDay,
        province: provinceCode,
        district: districtCode,
        diaChiCuThe: detailAddress
    });

    console.log("‚úÖ D·ªØ li·ªáu trong form sau khi g√°n:", this.editTeacherForm.value);
    this.isEditModalOpen = true;
}


  
  /** T√°ch diaChi th√†nh t·ªânh, qu·∫≠n/huy·ªán, ƒë·ªãa ch·ªâ c·ª• th·ªÉ */
  extractAddressParts(diaChi: string): { province: string, district: string, detail: string } {
    const parts = diaChi.split(',').map(part => part.trim());
    return {
      province: parts[0] || '',
      district: parts[1] || '',
      detail: parts.slice(2).join(', ') || ''
    };
  }
  
  
  

  closeEditModal() {
    this.isEditModalOpen = false;
  }

  submitEditStudent() {
  console.log("üîç Gi√°o vi√™n ƒëang ch·ªânh s·ª≠a:", this.selectedTeacher);
  console.log("üîç D·ªØ li·ªáu t·ª´ Form:", this.editTeacherForm.value);

  let formData = { ...this.editTeacherForm.value };

  // üî• Ki·ªÉm tra n·∫øu `code` b·ªã undefined th√¨ l·∫•y t·ª´ `selectedTeacher`
  if (!formData.code || formData.code.trim() === "") {
    if (this.selectedTeacher && this.selectedTeacher.code) {
      formData.code = this.selectedTeacher.code;
    } else {
      this.toastr.error("Kh√¥ng t√¨m th·∫•y m√£ gi√°o vi√™n!", "L·ªói");
      console.error("‚ùå L·ªói: M√£ gi√°o vi√™n kh√¥ng t·ªìn t·∫°i!");
      return;
    }
  }

  console.log("‚úÖ M√£ gi√°o vi√™n sau khi g√°n:", formData.code);

  // üîπ Chuy·ªÉn ƒë·ªïi ng√†y sinh sang ƒë·ªãnh d·∫°ng `YYYY-MM-DD`
  if (formData.ngaySinh) {
    const date = new Date(formData.ngaySinh);
    formData.ngaySinh = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
  }

  // üîπ ƒê·ªãnh d·∫°ng l·∫°i `diaChi`
  const provinceObj = this.provinces.find(p => p.code == formData.province);
  const provinceName = provinceObj ? provinceObj.name : '';

  const districtObj = this.editDistricts.find(d => d.code == formData.district);
  const districtName = districtObj ? districtObj.name : '';

  formData.diaChi = `${provinceName}, ${districtName}, ${formData.diaChiCuThe || ''}`.trim();

  // üîπ Chuy·ªÉn ƒë·ªïi status th√†nh string "true" ho·∫∑c "false"
  formData.status = formData.status ? "true" : "false";

  console.log("üì§ G·ª≠i API c·∫≠p nh·∫≠t gi√°o vi√™n v·ªõi d·ªØ li·ªáu:", JSON.stringify(formData));

  // üõ† G·ª≠i API c·∫≠p nh·∫≠t
  this.giaovienService.updateGiaoVien(formData).subscribe({
    next: (res) => {
      console.log("‚úÖ Ph·∫£n h·ªìi t·ª´ API:", res);
      if (!res.isError) {
        this.toastr.success("C·∫≠p nh·∫≠t gi√°o vi√™n th√†nh c√¥ng!", "Th√†nh c√¥ng");
        this.closeEditModal();
        this.loadDanhSachGiaoVien();
      } else {
        this.toastr.error(res.message, "L·ªói");
      }
    },
    error: (error) => {
      console.error("‚ùå L·ªói k·∫øt n·ªëi API:", error);
      this.toastr.error("C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!", "L·ªói");
    }
  });
}

  
  

  filterByStatus() {
    this.currentPage = 1;
    this.loadDanhSachGiaoVien();
  }
  /** H√†m format ng√†y => yyyy-MM-dd */
  formatDate(date: Date) {
    const d = new Date(date);
    const year = d.getFullYear();
    const month = String(d.getMonth() + 1).padStart(2, '0');
    const day = String(d.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  }
    onChooseFileclick() {
      this.router.navigate(['/giaovien/import-giao-vien']);
    }
  
    onExportFile() {
      alert('Xu·∫•t T·ªáp');
    }
  

}
