import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable, of } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class ChuongtrinhService {

  private programsSource = new BehaviorSubject<any[]>(this.getStoredPrograms());
  programs$ = this.programsSource.asObservable();

  constructor() {}

  // üî• L·∫•y danh s√°ch t·ª´ localStorage ho·∫∑c d·ªØ li·ªáu m·∫∑c ƒë·ªãnh
  private getStoredPrograms(): any[] {
    const storedData = localStorage.getItem('programs');
    if (storedData) {
      const programs = JSON.parse(storedData);
      if (programs.length > 0) {
        return programs; // N·∫øu danh s√°ch v·∫´n c√≤n, s·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ localStorage
      }
    }
  
    // üõ† N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu ho·∫∑c danh s√°ch r·ªóng, kh√¥i ph·ª•c l·∫°i danh s√°ch m·∫∑c ƒë·ªãnh
    const defaultPrograms = [
      {
        title: 'Ch∆∞∆°ng tr√¨nh h·ªçc 1',
        description: 'M√¥ t·∫£ ch∆∞∆°ng tr√¨nh h·ªçc 1',
        isHidden: false,
        lessons: [
          { title: 'B√†i 1', fileUrl: 'assets/files/sample-lesson-1.pdf' },
          { title: 'B√†i 2', fileUrl: 'assets/files/sample-lesson-2.pdf' }
        ]
      },
      {
        title: 'Ch∆∞∆°ng tr√¨nh h·ªçc 2',
        description: 'M√¥ t·∫£ ch∆∞∆°ng tr√¨nh h·ªçc 2',
        isHidden: false,
        lessons: [
          { title: 'B√†i 1', fileUrl: 'assets/files/sample-lesson-3.pdf' }
        ]
      }
    ];
  
    localStorage.setItem('programs', JSON.stringify(defaultPrograms)); // üî• L∆∞u l·∫°i danh s√°ch m·∫∑c ƒë·ªãnh v√†o localStorage
    return defaultPrograms;
  }
  

  // üî• C·∫≠p nh·∫≠t localStorage sau m·ªói thay ƒë·ªïi
  private updateLocalStorage(programs: any[]) {
    localStorage.setItem('programs', JSON.stringify(programs));
  }

  // üìå L·∫•y danh s√°ch ch∆∞∆°ng tr√¨nh
  getPrograms(): any[] {
    return this.programsSource.value.slice(); // üî• Thay th·∫ø spread (...)
  }

  // üìå L·∫•y m·ªôt ch∆∞∆°ng tr√¨nh theo index
  getProgram(index: number): any {
    return this.programsSource.value[index] ? Object.assign({}, this.programsSource.value[index]) : null;
  }

  // üìå C·∫≠p nh·∫≠t ch∆∞∆°ng tr√¨nh
  updateProgram(index: number, updatedProgram: any): void {
    const programs = this.programsSource.value.slice(); // üî• Thay th·∫ø spread (...)
    if (index >= 0 && index < programs.length) {
      programs[index] = Object.assign({}, updatedProgram); // üî• Tr√°nh spread object
      this.programsSource.next(programs);
      this.updateLocalStorage(programs); // üî• L∆∞u l·∫°i thay ƒë·ªïi v√†o localStorage
    }
  }

  // üìå Th√™m ch∆∞∆°ng tr√¨nh m·ªõi
  addProgram(newProgram: any): void {
    const programs = this.programsSource.value.slice(); // üî• Thay th·∫ø spread (...)
    programs.push(newProgram);
    this.programsSource.next(programs);
    this.updateLocalStorage(programs); // üî• L∆∞u v√†o localStorage
  }

  // üìå X√≥a ch∆∞∆°ng tr√¨nh
  deleteProgram(index: number): void {
    const programs = this.programsSource.value.slice(); // üî• Thay th·∫ø spread (...)
    programs.splice(index, 1);
    this.programsSource.next(programs);
    this.updateLocalStorage(programs); // üî• C·∫≠p nh·∫≠t l·∫°i localStorage
  }

  // üìå Gi·∫£ l·∫≠p upload file (ch∆∞a c√≥ backend)
  uploadFile(file: File): Observable<string> {
    const fileName = encodeURIComponent(file.name);
    const fakeServerUrl = `https://example.com/uploads/${fileName}`;
    return of(fakeServerUrl); // Gi·∫£ l·∫≠p tr·∫£ v·ªÅ URL th·∫≠t t·ª´ server
  }
}
