import { Component, OnInit } from '@angular/core';
import { ChuongtrinhService } from './shared/chuongtrinh.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-chuongtrinh',
  templateUrl: './chuongtrinh.component.html',
  styleUrls: ['./chuongtrinh.component.scss']
})
export class ChuongtrinhComponent implements OnInit {

  programs: any[] = [];

  constructor(
    private chuongtrinhService: ChuongtrinhService,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.chuongtrinhService.getPrograms(); // üöÄ G·ªçi API khi v√†o trang
  
    this.chuongtrinhService.programs$.subscribe(data => {
      if (data && data.length > 0) {
        this.programs = data; // ‚úÖ C·∫≠p nh·∫≠t danh s√°ch
        console.log("üìå C·∫≠p nh·∫≠t danh s√°ch ch∆∞∆°ng tr√¨nh:", this.programs);
      } else {
        console.warn("‚ö†Ô∏è Kh√¥ng c√≥ ch∆∞∆°ng tr√¨nh n√†o!");
      }
    });
  }
  
  

  /**
   * Toggle hi·ªÉn th·ªã n·ªôi dung b√†i h·ªçc c·ªßa ch∆∞∆°ng tr√¨nh
   */
  toggleContent(id: number, event: Event) {
    event.preventDefault();
    const program = this.programs.find(p => p.id === id);
    if (program) {
      program.expanded = !program.expanded;
    }
  }

  /**
   * T·∫£i file ƒë√≠nh k√®m c·ªßa b√†i h·ªçc
   */
  downloadFile(fileUrl: string) {
    if (!fileUrl) {
      alert('Kh√¥ng c√≥ file ƒë·ªÉ t·∫£i!');
      return;
    }
    const link = document.createElement('a');
    link.href = fileUrl;
    link.download = fileUrl.substring(fileUrl.lastIndexOf('/') + 1);
    link.click();
  }

  /**
   * X√≥a ch∆∞∆°ng tr√¨nh h·ªçc theo ID
   */
  // deleteProgram(id: number) {
  //   const confirmDelete = confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ch∆∞∆°ng tr√¨nh n√†y?");
  //   if (confirmDelete) {
  //     this.chuongtrinhService.deleteProgram(id);
  //     this.programs = this.chuongtrinhService.getPrograms().map(program => ({ ...program }));
  //     alert('X√≥a th√†nh c√¥ng!');
  //   }
  // }
}
