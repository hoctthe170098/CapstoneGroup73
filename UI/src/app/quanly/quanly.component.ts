import { Component, OnInit } from '@angular/core';
import { AccountmanagerService } from './shared/quanly.service';
import { Router } from '@angular/router';
import { ChangeDetectorRef } from '@angular/core';
import { ToastrService } from 'ngx-toastr';

@Component({
  selector: 'app-accountmanager',
  templateUrl: './quanly.component.html',
  styleUrls: ['./quanly.component.scss']
})
export class AccountmanagerComponent implements OnInit {
  selectedProvince: any = null;
  selectedDistrict: any = null;
  trangThai: string = '';
  searchTerm: string = '';
  cosoId: string = '';
  roleName: string = '';
  cosoList: any[] = [];
  students: any[] = [];

  currentPage: number = 1;
  totalPages: number = 1;
  totalItems: number = 0; // T·ªïng s·ªë b·∫£n ghi
  pageSize: number = 8;

  isModalOpen: boolean = false;
  isEditModalOpen: boolean = false;

  newStudent: any = {
    code: '', ten: '', gioiTinh: '', ngaySinh: '', email: '',
    soDienThoai: '', coSoId: '', province: '', district: '', diaChi: '', role: '', status: 'true'
  };

  editStudent: any = {
    code: '', ten: '', gioiTinh: '', ngaySinh: '', email: '',
    soDienThoai: '', coSoId: '', province: '', district: '', diaChi: '', role: '', status: ''
  };

  provinces: any[] = [];
  districts: any[] = [];
  editDistricts: any[] = [];
  isUnderage: boolean = false;
  isCodeEmpty: boolean = false;
  isRoleInvalid: boolean = false;
  isCoSoInvalid: boolean = false;

  constructor(private accountmanagerService: AccountmanagerService, private cd: ChangeDetectorRef, private toastr: ToastrService) { }


  ngOnInit(): void {
    this.accountmanagerService.getProvinces().subscribe(
      data => {
        this.provinces = data;
      },
      error => console.error('Error fetching provinces:', error)
    );
    this.loadDanhSachNhanVien();
    this.loadDanhSachCoSo(); // T·∫£i danh s√°ch c∆° s·ªü khi kh·ªüi t·∫°o component
    console.log(this.cosoList);
  }

  // T·∫£i danh s√°ch nh√¢n vi√™n
  loadDanhSachNhanVien() {
    // Chuy·ªÉn dropdown "trangThai" sang gi√° tr·ªã isActive (true, false, ho·∫∑c null n·∫øu kh√¥ng ch·ªçn)
    let isActiveFilter: boolean | null = null;
    if (this.trangThai === 'Ho·∫°t ƒë·ªông') {
      isActiveFilter = true;
    } else if (this.trangThai === 'T·∫°m ng·ª´ng') {
      isActiveFilter = false;
    }
    // G·ªçi API v·ªõi payload bao g·ªìm isActive
    this.accountmanagerService.getDanhSachNhanVien(
      this.currentPage,  // trang hi·ªán t·∫°i
      this.pageSize,     // s·ªë b·∫£n ghi m·ªói trang
      this.searchTerm,
      this.cosoId,
      this.roleName,   // t·ª´ kh√≥a t√¨m ki·∫øm
      '',                // sortBy (n·∫øu c·∫ßn)
      isActiveFilter     // filter tr·∫°ng th√°i theo isActive (boolean)
    ).subscribe(
      (response: any) => {
        if (!response.isError && response.data) {
          console.log('D·ªØ li·ªáu nh√¢n vi√™n t·ª´ API:', response);
          // Map d·ªØ li·ªáu t·ª´ API, s·ª≠ d·ª•ng tr∆∞·ªùng isActive c·ªßa API v√† t·∫°o thu·ªôc t√≠nh hi·ªÉn th·ªã tr·∫°ng th√°i
          this.students = response.data.items.map((student: any) => ({
            ...student,
            showDetails: false,
            isActive: student.trangThai, // s·ª≠ d·ª•ng isActive t·ª´ API (boolean)
            displayStatus: student.trangThai ? 'Ho·∫°t ƒë·ªông' : 'T·∫°m ng·ª´ng'
          }));

          this.totalItems = response.data.totalCount || 0;
          this.totalPages = Math.ceil(this.totalItems / this.pageSize);
        } else {
          console.error("L·ªói khi t·∫£i danh s√°ch nh√¢n vi√™n", response?.message || 'Kh√¥ng c√≥ response.message');
        }
        this.cd.detectChanges();
      },
      error => {
        console.error("L·ªói k·∫øt n·ªëi API", error);
      }
    );
  }

  /** üü¢ Chuy·ªÉn trang */
  changePage(page: number) {
    if (page >= 1 && page <= this.totalPages) {
      this.currentPage = page;
      this.loadDanhSachNhanVien();
    }
  }




  // T·∫£i danh s√°ch c∆° s·ªü
  loadDanhSachCoSo() {
    this.accountmanagerService.getDanhSachCoSo().subscribe(
      response => {
        console.log('D·ªØ li·ªáu t·ª´ API:', response);
        if (response && response.data) {
          this.cosoList = response.data;
        }
      },
      error => {
        console.error('L·ªói t·∫£i danh s√°ch c∆° s·ªü:', error);
      }
    );
  }
  filterByCoSo() {
    this.currentPage = 1;
    this.loadDanhSachNhanVien();
  }
  filterByRole() {
    this.currentPage = 1;
    this.loadDanhSachNhanVien();
  }
  toggleDetails(index: number) {
    this.students[index].showDetails = !this.students[index].showDetails;
  }

  openAddStudentModal() { this.isModalOpen = true; }
  closeModal() { this.isModalOpen = false; }

  submitNewStudent() {
    this.forceNVPrefix();

    if (!this.newStudent.code || this.newStudent.code.trim() === '') {
      ;
      return;
    }
    if (this.newStudent.code.length > 18) {

      return;
    }
    if (!this.newStudent.ten || this.newStudent.ten.trim() === '') {

      return;
    }
    if (this.newStudent.ten.length > 30) {

      return;
    }
    if (!this.validatePhoneNumber(this.newStudent.soDienThoai)) {

      return;

    }




    const provinceName = this.getProvinceName();
    const districtName = this.getDistrictName();

    // ƒê·∫£m b·∫£o m√£ nh√¢n vi√™n lu√¥n c√≥ ti·ªÅn t·ªë "NV"


    const fullAddress = `${this.newStudent.diaChi}, ${districtName}, ${provinceName}`;

    const newHs = {
      code: this.newStudent.code && this.newStudent.code.startsWith("NV")
        ? this.newStudent.code.replace(/^NV/, "")
        : this.newStudent.code,
      ten: this.newStudent.ten,
      gioiTinh: this.newStudent.gioiTinh,
      ngaySinh: this.newStudent.ngaySinh ? this.formatDate(this.newStudent.ngaySinh) : '',
      email: this.newStudent.email,
      soDienThoai: this.newStudent.soDienThoai,
      coSoId: this.newStudent.coSoId || null,
      diaChi: fullAddress.trim() !== ", ," ? fullAddress : "Kh√¥ng x√°c ƒë·ªãnh",
      role: this.newStudent.role
    };

    console.log("üìå D·ªØ li·ªáu g·ª≠i l√™n API:", newHs);

    this.accountmanagerService.createNhanVien(newHs).subscribe(
      response => {
        if (!response.isError) {
          this.toastr.success(response.message);
          this.loadDanhSachNhanVien();
          this.isModalOpen = false;
        } else {
          // ‚úÖ N·∫øu c√≥ l·ªói t·ª´ API, hi·ªÉn th·ªã th√¥ng b√°o t·ª´ `errors`
          if (response.errors && response.errors.length > 0) {
            this.toastr.error(response.errors.join("\n")); // Hi·ªÉn th·ªã t·∫•t c·∫£ l·ªói t·ª´ API
          } else {
            this.toastr.error(response.message);
          }
          this.isModalOpen = true;
        }
      },
      error => {
        console.error('‚ùå L·ªói khi th√™m nh√¢n vi√™n:', error);
        if (error.error && error.error.isError) {
          // ‚úÖ Ki·ªÉm tra l·ªói t·ª´ API v√† hi·ªÉn th·ªã
          if (error.error.errors && error.error.errors.length > 0) {
            alert(`üö® ${error.error.errors.join("\n")}`);
          } else {
            alert(`‚ö†Ô∏è ${error.error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`);
          }
        } else {
          alert('‚ö†Ô∏è L·ªói khi th√™m nh√¢n vi√™n. Ki·ªÉm tra API ho·∫∑c d·ªØ li·ªáu ƒë·∫ßu v√†o!');
        }
      }
    );
  }
  validateCoSo() {
    if (!this.newStudent.coSoId || this.newStudent.coSoId.trim() === '') {
      this.isCoSoInvalid = true;
    } else {
      this.isCoSoInvalid = false;
    }
  }
  validateRole() {
    if (!this.newStudent.role || this.newStudent.role.trim() === '') {
      this.isRoleInvalid = true;
    } else {
      this.isRoleInvalid = false;
    }
  }

  validateEmail(email: string): boolean {
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    return emailPattern.test(email);
  }
  validatePhoneNumber(phone: string): boolean {
    if (!phone) return false;
    phone = phone.trim();  // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a
    const phonePattern = /^0\d{9,10}$/; // Ch·∫•p nh·∫≠n 10-11 s·ªë v√† b·∫Øt ƒë·∫ßu b·∫±ng 0
    return phonePattern.test(phone);
  }


  checkAge(ngaySinh: string) {
    if (!ngaySinh) {
      this.isUnderage = false;
      return;
    }

    const birthDate = new Date(ngaySinh);
    const today = new Date();
    const age = today.getFullYear() - birthDate.getFullYear();
    const monthDiff = today.getMonth() - birthDate.getMonth();
    const dayDiff = today.getDate() - birthDate.getDate();

    this.isUnderage = (age < 18 || (age === 18 && (monthDiff < 0 || (monthDiff === 0 && dayDiff < 0))));
  }
  tenVaiTro(vaiTro: string) {
    if (vaiTro == "CampusManager") return "Qu·∫£n l√Ω c∆° s·ªü";
    return "Qu·∫£n l√Ω t√†i li·ªáu h·ªçc t·∫≠p";
  }




  getProvinceName(): string {
    if (this.selectedProvince) {
      console.log("üîç T·ªânh/Th√†nh ph·ªë ƒë√£ ch·ªçn:", this.selectedProvince.name);
      return this.selectedProvince.name;
    }
    return "Kh√¥ng x√°c ƒë·ªãnh";
  }

  getDistrictName(): string {
    return this.selectedDistrict ? this.selectedDistrict.name : "Kh√¥ng x√°c ƒë·ªãnh";
  }
  forceNVPrefix() {
    if (!this.newStudent.code.startsWith('NV')) {
      this.newStudent.code = 'NV' + this.newStudent.code.replace(/^NV/, '').trim();
    }
    if (this.newStudent.code.length > 18) {
      this.newStudent.code = this.newStudent.code.substring(0, 18);
    }
  }

  forceNVPrefixEdit() {
    if (!this.editStudent.code.startsWith('NV')) {
      this.editStudent.code = 'NV' + this.editStudent.code.replace(/^NV/, '').trim();
    }
    if (this.editStudent.code.length > 18) {
      this.editStudent.code = this.editStudent.code.substring(0, 18);
    }
  }


  onProvinceChange(provinceCode: string) {
    this.selectedProvince = this.provinces.find(p => p.code == provinceCode);
    this.selectedDistrict = null; // Reset district khi ch·ªçn t·ªânh/th√†nh ph·ªë m·ªõi

    if (this.selectedProvince) {
      this.districts = this.selectedProvince.districts || [];
      console.log("üåç ƒê√£ ch·ªçn t·ªânh/th√†nh ph·ªë:", this.selectedProvince.name);
      console.log("üèôÔ∏è Danh s√°ch qu·∫≠n/huy·ªán c·∫≠p nh·∫≠t:", this.districts);
    } else {
      this.districts = [];
      console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y t·ªânh/th√†nh ph·ªë!");
    }
  }


  onDistrictChange(districtCode: string) {
    console.log("üìå M√£ qu·∫≠n/huy·ªán nh·∫≠n ƒë∆∞·ª£c khi th√™m m·ªõi:", districtCode);

    if (!this.districts || this.districts.length === 0) {
      console.error("‚ö†Ô∏è Kh√¥ng c√≥ danh s√°ch qu·∫≠n/huy·ªán ƒë·ªÉ t√¨m ki·∫øm khi th√™m m·ªõi!");
      return;
    }

    // Chuy·ªÉn districtCode v·ªÅ c√πng ki·ªÉu d·ªØ li·ªáu v·ªõi danh s√°ch
    const isDistrictCodeString = typeof this.districts[0].code === "string";
    const districtCodeFormatted = isDistrictCodeString ? String(districtCode) : Number(districtCode);

    const availableDistrictCodes = this.districts.map(d => isDistrictCodeString ? String(d.code) : Number(d.code));
    console.log("üìå Danh s√°ch m√£ qu·∫≠n/huy·ªán c√≥ s·∫µn khi th√™m m·ªõi:", availableDistrictCodes);

    if (!availableDistrictCodes.includes(districtCodeFormatted)) {
      console.error(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y qu·∫≠n/huy·ªán v·ªõi m√£: ${districtCodeFormatted}`);
      return;
    }

    this.selectedDistrict = this.districts.find(d => isDistrictCodeString ? String(d.code) === String(districtCodeFormatted) : Number(d.code) === Number(districtCodeFormatted));
    console.log("üèôÔ∏è ƒê√£ ch·ªçn qu·∫≠n/huy·ªán khi th√™m m·ªõi:", this.selectedDistrict?.name);
  }





  onEditStudentClick(index: number) {
    const hs = this.students[index];

    // Sao ch√©p d·ªØ li·ªáu ƒë·ªÉ ch·ªânh s·ª≠a
    this.editStudent = {
      ...hs,
      ngaySinh: this.formatDate(hs.ngaySinh),
      status: hs.isActive ? "true" : "false"

    };
    console.log("üìå Tr·∫°ng th√°i tr∆∞·ªõc khi s·ª≠a:", this.editStudent.status);
    console.log("üìå Vai tr√≤ c·ªßa nh√¢n vi√™n tr∆∞·ªõc khi s·ª≠a:", this.editStudent)
    console.log("üìå Vai tr√≤ c·ªßa nh√¢n vi√™n tr∆∞·ªõc khi s·ª≠a:", this.editStudent.role)
    // T√¨m cosoId t·ª´ cosoList d·ª±a tr√™n hs.tenCoSo
    console.log('D·ªØ li·ªáu nh√¢n vi√™n:', hs);
    console.log('C√°c key c·ªßa hs:', Object.keys(hs));

    console.log('Gi√° tr·ªã role nh·∫≠n t·ª´ API:', hs.tenVaiTro);
    const coSo = this.cosoList.find(cs => cs.ten === hs.tenCoSo);
    this.editStudent.coSoId = coSo ? coSo.id : null;
    if (!this.editStudent.gioiTinh) {
      this.editStudent.gioiTinh = "Nam";
    }

    const validRoles = ["CampusManager", "LearningManager"];
    if (!validRoles.includes(this.editStudent.role)) {
      // N·∫øu API tr·∫£ v·ªÅ gi√° tr·ªã kh√¥ng h·ª£p l·ªá (ho·∫∑c r·ªóng) th√¨ kh√¥ng g√°n m·∫∑c ƒë·ªãnh ƒë·ªÉ tr√°nh √©p c·ª©ng
      // B·∫°n c√≥ th·ªÉ gi·ªØ gi√° tr·ªã r·ªóng ƒë·ªÉ ng∆∞·ªùi d√πng t·ª± ch·ªçn l·∫°i
      this.editStudent.role = "";
    }


    if (this.editStudent.diaChi) {
      const parts = this.editStudent.diaChi.split(',').map(p => p.trim());

      if (parts.length >= 3) {
        const provinceName = parts[parts.length - 1];
        const districtName = parts[parts.length - 2];
        const specificAddress = parts.slice(0, parts.length - 2).join(', ');

        // T√¨m **T·ªânh/Th√†nh ph·ªë**
        this.selectedProvince = this.provinces.find(p => p.name === provinceName);
        if (this.selectedProvince) {
          this.editStudent.province = this.selectedProvince.code;
          this.editDistricts = this.selectedProvince.districts || [];

          // üü¢ T√¨m **Qu·∫≠n/Huy·ªán**
          this.selectedDistrict = this.editDistricts.find(d => d.name === districtName);
          if (this.selectedDistrict) {
            this.editStudent.district = this.selectedDistrict.code;
          }
        }
        this.editStudent.diaChi = specificAddress;
      }
    }
    this.isEditModalOpen = true;
  }
  closeEditModal() { this.isEditModalOpen = false; }
  submitEditStudent() {
    this.forceNVPrefixEdit(); // ƒê·∫£m b·∫£o Code ƒë√∫ng ƒë·ªãnh d·∫°ng khi ch·ªânh s·ª≠a

    if (!this.editStudent.soDienThoai || this.editStudent.soDienThoai.trim() === '') {

      return;
    }
    if (!this.validatePhoneNumber(this.editStudent.soDienThoai)) {

      return;
    }

    if (!this.editStudent.ten || this.editStudent.ten.trim() === '') {

      return;
    }
    if (this.editStudent.ten.length > 30) {

      return;
    }

    const provinceName = this.selectedProvince ? this.selectedProvince.name : "Kh√¥ng x√°c ƒë·ªãnh";
    const districtName = this.selectedDistrict ? this.selectedDistrict.name : "Kh√¥ng x√°c ƒë·ªãnh";

    const fullAddress = `${this.editStudent.diaChi.trim()}, ${districtName}, ${provinceName}`;

    const updatedHs = {
      code: this.editStudent.code,
      ten: this.editStudent.ten,
      gioiTinh: this.editStudent.gioiTinh,
      diaChi: fullAddress.trim() !== ", Kh√¥ng x√°c ƒë·ªãnh, Kh√¥ng x√°c ƒë·ªãnh" ? fullAddress : "Kh√¥ng x√°c ƒë·ªãnh",
      ngaySinh: this.editStudent.ngaySinh ? this.formatDate(this.editStudent.ngaySinh) : '',
      email: this.editStudent.email,
      soDienThoai: this.editStudent.soDienThoai,
      coSoId: this.editStudent.coSoId || null,
      role: this.editStudent.tenVaiTro,
      status: this.editStudent.status
    };
    console.log("üìå D·ªØ li·ªáu g·ª≠i l√™n API khi s·ª≠a:", updatedHs);

    this.accountmanagerService.updateNhanVien(updatedHs).subscribe(
      response => {
        if (!response.isError) {
          this.toastr.success(response.message);
          this.isEditModalOpen = false;
        } else {
          this.toastr.error(response.message);
          this.isEditModalOpen = true;
        }
        this.loadDanhSachNhanVien();
      },
      error => {
        alert('L·ªói khi c·∫≠p nh·∫≠t nh√¢n vi√™n. Ki·ªÉm tra API ho·∫∑c d·ªØ li·ªáu ƒë·∫ßu v√†o!');
      }
    );
  }
  searchNhanVien() {
    this.currentPage = 1;
    this.loadDanhSachNhanVien();
  }
  filterByStatus() {
    this.currentPage = 1;
    this.loadDanhSachNhanVien();
  }
  onProvinceChangeForEdit(provinceCode: string) {
    this.selectedProvince = this.provinces.find(p => String(p.code) === String(provinceCode));

    if (this.selectedProvince) {
      this.editDistricts = this.selectedProvince.districts || [];
      this.editStudent.district = '';  // Reset qu·∫≠n/huy·ªán khi ƒë·ªïi t·ªânh
    } else {
      this.editDistricts = [];
    }
  }
  onDistrictChangeForEdit(districtCode: string) {
    if (!this.editDistricts || this.editDistricts.length === 0) {
      console.error("‚ö†Ô∏è Kh√¥ng c√≥ danh s√°ch qu·∫≠n/huy·ªán ƒë·ªÉ t√¨m ki·∫øm!");
      return;
    }

    console.log("üìå M√£ qu·∫≠n/huy·ªán nh·∫≠n ƒë∆∞·ª£c khi ch·ªânh s·ª≠a:", districtCode);

    // X√°c ƒë·ªãnh ki·ªÉu d·ªØ li·ªáu c·ªßa m√£ qu·∫≠n/huy·ªán
    const isDistrictCodeString = typeof this.editDistricts[0].code === "string";
    const districtCodeFormatted = isDistrictCodeString ? String(districtCode).trim() : Number(districtCode.trim());

    // T√¨m qu·∫≠n/huy·ªán t∆∞∆°ng ·ª©ng
    this.selectedDistrict = this.editDistricts.find(d =>
      isDistrictCodeString ? String(d.code) === String(districtCodeFormatted)
        : Number(d.code) === Number(districtCodeFormatted)
    );

    if (this.selectedDistrict) {
      this.editStudent.district = this.selectedDistrict.code;
      console.log(`‚úÖ ƒê√£ ch·ªçn qu·∫≠n/huy·ªán: ${this.selectedDistrict.name} (${this.selectedDistrict.code})`);
    } else {
      console.error(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y qu·∫≠n/huy·ªán c√≥ m√£: ${districtCodeFormatted}`);
      this.editStudent.district = '';  // Reset gi√° tr·ªã n·∫øu kh√¥ng t√¨m th·∫•y
    }
  }
  formatDate(date: any) {
    if (!date) return '';
    const d = new Date(date);
    return `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}-${String(d.getDate()).padStart(2, '0')}`;
  }

}
